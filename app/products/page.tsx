"use client"

import React, { useEffect, useMemo, useState } from "react"
import {
  createColumnHelper, // Generated by https://quicktype.io
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

export interface IProduct {
  id: number
  title: string
  // description: string
  // price: number
  // discountPercentage: number
  // rating: number
  // stock: number
  brand: string
  category: string
  // thumbnail: string
  // images: string[]
}

async function getData() {
  const res = await fetch("https://dummyjson.com/products/")
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.

  // Recommendation: handle errors
  if (!res.ok) {
    // This will activate the closest `error.js` Error Boundary
    throw new Error("Failed to fetch data")
  }

  return res.json()
}

const Products = () => {
  const [data, setData] = useState([])
  console.log("data:", data)

  useEffect(() => {
    ;(async () => {
      const data = await getData()
      setData(data.products)
    })()
  }, [])

  const columnHelper = createColumnHelper<IProduct>()

  const columns = useMemo(
    () => [
      columnHelper.accessor("id", { header: "id" }),
      columnHelper.accessor("title", { header: "Title" }),
      columnHelper.accessor("category", { header: "Category" }),
      columnHelper.accessor("brand", { header: "Brand" }),
    ],
    []
  )

  const tableInstance = useReactTable({
    columns,
    data,
    getCoreRowModel: getCoreRowModel(),
  })
  return (
    <table>
      <thead>
        {tableInstance.getHeaderGroups().map((headerGroup) => (
          <tr key={headerGroup.id}>
            {headerGroup.headers.map((header) => (
              <th key={header.id}>
                {header.isPlaceholder
                  ? null
                  : flexRender(
                      header.column.columnDef.header,
                      header.getContext()
                    )}
              </th>
            ))}
          </tr>
        ))}
      </thead>
      <tbody>
        {tableInstance.getRowModel().rows.map((row) => (
          <tr key={row.id}>
            {row.getVisibleCells().map((cell) => (
              <td key={cell.id}>
                {flexRender(cell.column.columnDef.cell, cell.getContext())}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  )
}
export default Products
